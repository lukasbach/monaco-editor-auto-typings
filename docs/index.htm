<!DOCTYPE html><html class="default"><head><meta charSet="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>monaco-editor-auto-typings</title><meta name="description" content="Documentation for monaco-editor-auto-typings"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="assets/style.css"/><link rel="stylesheet" href="assets/highlight.css"/><script async src="assets/search.js" id="search-script"></script></head><body><script>document.body.classList.add(localStorage.getItem("tsd-theme") || "os")</script><header><div class="tsd-page-toolbar"><div class="container"><div class="table-wrap"><div class="table-cell" id="tsd-search" data-base="."><div class="field"><label for="tsd-search-field" class="tsd-widget search no-caption">Search</label><input type="text" id="tsd-search-field"/></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="index.html" class="title">monaco-editor-auto-typings</a></div><div class="table-cell" id="tsd-widgets"><div id="tsd-filter"><a href="#" class="tsd-widget options no-caption" data-toggle="options">Options</a><div class="tsd-filter-group"><div class="tsd-select" id="tsd-filter-visibility"><span class="tsd-select-label">All</span><ul class="tsd-select-list"><li data-value="public">Public</li><li data-value="protected">Public/Protected</li><li data-value="private" class="selected">All</li></ul></div> <input type="checkbox" id="tsd-filter-inherited" checked/><label class="tsd-widget" for="tsd-filter-inherited">Inherited</label><input type="checkbox" id="tsd-filter-externals" checked/><label class="tsd-widget" for="tsd-filter-externals">Externals</label></div></div><a href="#" class="tsd-widget menu no-caption" data-toggle="menu">Menu</a></div></div></div></div><div class="tsd-page-title"><div class="container"><h1>monaco-editor-auto-typings </h1></div></div></header><div class="container container-main"><div class="row"><div class="col-8 col-content"><div class="tsd-panel tsd-typography">
<a href="#monaco-editor-auto-typings" id="monaco-editor-auto-typings" style="color: inherit; text-decoration: none;">
  <h1>monaco-editor-auto-typings</h1>
</a>
<p><img src="https://github.com/lukasbach/monaco-editor-auto-typings/workflows/Main/badge.svg" alt="Main"></p>
<blockquote>
<p>View the demo at <a href="https://lukasbach.github.io/monaco-editor-auto-typings/">lukasbach.github.io/monaco-editor-auto-typings</a></p>
</blockquote>
<p>monaco-editor-auto-typings is a plugin for <a href="https://microsoft.github.io/monaco-editor/">Microsoft&#39;s Monaco Editor</a>,
which automatically loads type declarations when you enter import-calls in the code editor.</p>
<p>Try it out in the <a href="https://lukasbach.github.io/monaco-editor-auto-typings/">demo</a>! Add some imports to some
libraries available on npm, such as <code>import express from &#39;express&#39;;</code>, and see that any imported variables
are automatically strictly typed.</p>
<p>monaco-editor-auto-typings comes with lots of customization options, but is still a one-liner to
add to your project. It works by loading declarations from UnPkg. They can then be optionally
cached in localStorage or elsewhere.</p>
<ul>
<li>Demo: <a href="https://lukasbach.github.io/monaco-editor-auto-typings/">lukasbach.github.io/monaco-editor-auto-typings</a></li>
<li>Documentation: <a href="https://lukasbach.github.io/monaco-editor-auto-typings/docs/">lukasbach.github.io/monaco-editor-auto-typings/docs</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/lukasbach/monaco-editor-auto-typings/HEAD/screenshot.png" alt="Example image"></p>

<a href="#example" id="example" style="color: inherit; text-decoration: none;">
  <h2>Example</h2>
</a>
<p>Install via <code>yarn add monaco-editor-auto-typings monaco-editor</code> or <code>npm install monaco-editor-auto-typings monaco-editor --save</code>.</p>
<pre><code class="language-typescript"><span class="hl-0">import</span><span class="hl-1"> </span><span class="hl-2">*</span><span class="hl-1"> </span><span class="hl-0">as</span><span class="hl-1"> </span><span class="hl-3">monaco</span><span class="hl-1"> </span><span class="hl-0">from</span><span class="hl-1"> </span><span class="hl-4">&#39;monaco-editor/esm/vs/editor/editor.api&#39;</span><span class="hl-1">;</span><br/><span class="hl-0">import</span><span class="hl-1"> { </span><span class="hl-3">AutoTypings</span><span class="hl-1">, </span><span class="hl-3">LocalStorageCache</span><span class="hl-1"> } </span><span class="hl-0">from</span><span class="hl-1"> </span><span class="hl-4">&#39;monaco-editor-auto-typings&#39;</span><span class="hl-1">;</span><br/><br/><span class="hl-2">const</span><span class="hl-1"> </span><span class="hl-5">val</span><span class="hl-1"> = </span><span class="hl-4">`</span><br/><span class="hl-4">import React from &#39;react&#39;;</span><br/><span class="hl-4">React.useEffect(0); // Type Error!</span><br/><span class="hl-4">`</span><span class="hl-1">;</span><br/><br/><span class="hl-6">// Create monaco editor instance</span><br/><span class="hl-2">const</span><span class="hl-1"> </span><span class="hl-5">editor</span><span class="hl-1"> = </span><span class="hl-3">monaco</span><span class="hl-1">.</span><span class="hl-3">editor</span><span class="hl-1">.</span><span class="hl-7">create</span><span class="hl-1">(</span><span class="hl-3">document</span><span class="hl-1">.</span><span class="hl-7">getElementById</span><span class="hl-1">(</span><span class="hl-4">&#39;root&#39;</span><span class="hl-1">)!, {</span><br/><span class="hl-1">  </span><span class="hl-3">model:</span><span class="hl-1"> </span><span class="hl-3">monaco</span><span class="hl-1">.</span><span class="hl-3">editor</span><span class="hl-1">.</span><span class="hl-7">createModel</span><span class="hl-1">(</span><span class="hl-3">val</span><span class="hl-1">, </span><span class="hl-4">&#39;typescript&#39;</span><span class="hl-1">),</span><br/><span class="hl-1">});</span><br/><br/><span class="hl-6">// Initialize auto typing on monaco editor. Imports will now automatically be typed!</span><br/><span class="hl-2">const</span><span class="hl-1"> </span><span class="hl-5">autoTypings</span><span class="hl-1"> = </span><span class="hl-0">await</span><span class="hl-1"> </span><span class="hl-3">AutoTypings</span><span class="hl-1">.</span><span class="hl-7">create</span><span class="hl-1">(</span><span class="hl-3">editor</span><span class="hl-1">, {</span><br/><span class="hl-1">  </span><span class="hl-3">sourceCache:</span><span class="hl-1"> </span><span class="hl-2">new</span><span class="hl-1"> </span><span class="hl-7">LocalStorageCache</span><span class="hl-1">(), </span><span class="hl-6">// Cache loaded sources in localStorage. May be omitted</span><br/><span class="hl-1">  </span><span class="hl-6">// Other options...</span><br/><span class="hl-1">});</span>
</code></pre>

<a href="#custom-monaco-version" id="custom-monaco-version" style="color: inherit; text-decoration: none;">
  <h2>Custom Monaco Version</h2>
</a>
<p>By default, monaco-editor-auto-typings directly imports the monaco editor library itself. You can
customize the monaco object with the <code>monaco</code> option. If you want to skip the entire import
of monaco when bringing your own instance of monaco, you can import from <code>monaco-editor-auto-typings/custom-editor</code>
instead of <code>monaco-editor-auto-typings</code>.</p>

<a href="#configuration" id="configuration" style="color: inherit; text-decoration: none;">
  <h2>Configuration</h2>
</a>
<p><a href="https://lukasbach.github.io/monaco-editor-auto-typings/docs/interfaces/Options.html">https://lukasbach.github.io/monaco-editor-auto-typings/docs/interfaces/Options.html</a></p>
<pre><code class="language-typescript"><span class="hl-0">export</span><span class="hl-1"> </span><span class="hl-2">interface</span><span class="hl-1"> </span><span class="hl-8">Options</span><span class="hl-1"> {</span><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Share source cache between multiple editor instances by storing</span><br/><span class="hl-6">   * the cache in a static property.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Defaults to false.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">shareCache</span><span class="hl-1">: </span><span class="hl-8">boolean</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Only use packages specified in the `versions` property.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Defaults to false.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">onlySpecifiedPackages</span><span class="hl-1">: </span><span class="hl-8">boolean</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Load typings from prespecified versions when initializing. Versions</span><br/><span class="hl-6">   * need to be specified in the ``versions`` option.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Defaults to false.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">preloadPackages</span><span class="hl-1">: </span><span class="hl-8">boolean</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Updates compiler options to defaults suitable for auto-loaded</span><br/><span class="hl-6">   * declarations, specifically by setting ``moduleResolution`` to</span><br/><span class="hl-6">   * ``NodeJs`` and ``allowSyntheticDefaultImports`` to true.</span><br/><span class="hl-6">   * Other options are not changed. Set this property to true to</span><br/><span class="hl-6">   * disable this behaviour.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Defaults to false.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">dontAdaptEditorOptions</span><span class="hl-1">: </span><span class="hl-8">boolean</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * After typings were resolved and injected into monaco, auto-typings</span><br/><span class="hl-6">   * updates the value of the current model to trigger a refresh in</span><br/><span class="hl-6">   * monaco&#39;s typing logic, so that it uses the injected typings.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">dontRefreshModelValueAfterResolvement</span><span class="hl-1">: </span><span class="hl-8">boolean</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Prespecified package versions. If a package is loaded whose</span><br/><span class="hl-6">   * name is specified in this object, it will load with the exact</span><br/><span class="hl-6">   * version specified in the object.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Setting the option ``onlySpecifiedPackages`` to true makes this</span><br/><span class="hl-6">   * property act as a whitelist for packages.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Setting the option ``preloadPackages`` makes the packages specified</span><br/><span class="hl-6">   * in this property load directly after initializing the auto-loader.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">versions</span><span class="hl-1">?: { [</span><span class="hl-3">packageName</span><span class="hl-1">: </span><span class="hl-8">string</span><span class="hl-1">]: </span><span class="hl-8">string</span><span class="hl-1"> };</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * If a new package was loaded, its name and version is added to the</span><br/><span class="hl-6">   * version object, and this method is called with the updated object.</span><br/><span class="hl-6">   * </span><span class="hl-2">@param</span><span class="hl-6"> </span><span class="hl-3">versions</span><span class="hl-6"> updated versions object.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-7">onUpdateVersions</span><span class="hl-1">?: (</span><span class="hl-3">versions</span><span class="hl-1">: { [</span><span class="hl-3">packageName</span><span class="hl-1">: </span><span class="hl-8">string</span><span class="hl-1">]: </span><span class="hl-8">string</span><span class="hl-1"> }) </span><span class="hl-2">=&gt;</span><span class="hl-1"> </span><span class="hl-8">void</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Supply a cache where declaration files and package.json files are</span><br/><span class="hl-6">   * cached to. Supply an instance of &lt;a href=&quot;classes/LocalStorageCache.html&quot;&gt;LocalStorageCache&lt;/a&gt; to cache</span><br/><span class="hl-6">   * files to localStorage.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">sourceCache</span><span class="hl-1">: </span><span class="hl-8">SourceCache</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Supply a custom resolver logic for declaration and package.json files.</span><br/><span class="hl-6">   * Defaults to &lt;a href=&quot;classes/JsDelivrSourceResolver.html&quot;&gt;JsDelivrSourceResolver&lt;/a&gt;. Not recommended to change.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">sourceResolver</span><span class="hl-1">: </span><span class="hl-8">SourceResolver</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * The root directory where your edited files are. Must end with</span><br/><span class="hl-6">   * a slash. The default is suitable unless you change the default</span><br/><span class="hl-6">   * URI of files loaded in the editor.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Defaults to &quot;inmemory://model/&quot;</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">fileRootPath</span><span class="hl-1">: </span><span class="hl-8">string</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Debounces code reanalyzing after user has changed the editor contents</span><br/><span class="hl-6">   * by the specified amount. Set to zero to disable. Value provided in</span><br/><span class="hl-6">   * milliseconds.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Defaults to 4000, i.e. 4 seconds.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">debounceDuration</span><span class="hl-1">: </span><span class="hl-8">number</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Maximum recursion depth for recursing packages. Determines how many</span><br/><span class="hl-6">   * nested package declarations are loaded. For example, if ``packageRecursionDepth``</span><br/><span class="hl-6">   * has the value 2, the code in the monaco editor references packages ``A1``, ``A2``</span><br/><span class="hl-6">   * and ``A3``, package ``A1`` references package ``B1`` and ``B1`` references ``C1``,</span><br/><span class="hl-6">   * then packages ``A1``, ``A2``, ``A3`` and ``B1`` are loaded. Set to zero to</span><br/><span class="hl-6">   * disable.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Defaults to 3.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">packageRecursionDepth</span><span class="hl-1">: </span><span class="hl-8">number</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Maximum recursion depth for recursing files. Determines how many</span><br/><span class="hl-6">   * nested file declarations are loaded. The same as ``packageRecursionDepth``,</span><br/><span class="hl-6">   * but for individual files. Set to zero to disable.</span><br/><span class="hl-6">   *</span><br/><span class="hl-6">   * Defaults to 10.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-3">fileRecursionDepth</span><span class="hl-1">: </span><span class="hl-8">number</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Called after progress updates like loaded declarations or events.</span><br/><span class="hl-6">   * </span><span class="hl-2">@param</span><span class="hl-6"> </span><span class="hl-3">update</span><span class="hl-6"> detailed event object containing update infos.</span><br/><span class="hl-6">   * </span><span class="hl-2">@param</span><span class="hl-6"> </span><span class="hl-3">textual</span><span class="hl-6"> a textual representation of the update for debugging.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-7">onUpdate</span><span class="hl-1">?: (</span><span class="hl-3">update</span><span class="hl-1">: </span><span class="hl-8">ProgressUpdate</span><span class="hl-1">, </span><span class="hl-3">textual</span><span class="hl-1">: </span><span class="hl-8">string</span><span class="hl-1">) </span><span class="hl-2">=&gt;</span><span class="hl-1"> </span><span class="hl-8">void</span><span class="hl-1">;</span><br/><br/><span class="hl-1">  </span><span class="hl-6">/**</span><br/><span class="hl-6">   * Called if errors occur.</span><br/><span class="hl-6">   * </span><span class="hl-2">@param</span><span class="hl-6"> </span><span class="hl-3">error</span><span class="hl-6"> a textual representation of the error.</span><br/><span class="hl-6">   */</span><br/><span class="hl-1">  </span><span class="hl-7">onError</span><span class="hl-1">?: (</span><span class="hl-3">error</span><span class="hl-1">: </span><span class="hl-8">string</span><span class="hl-1">) </span><span class="hl-2">=&gt;</span><span class="hl-1"> </span><span class="hl-8">void</span><span class="hl-1">;</span><br/><span class="hl-1">}</span>
</code></pre>
</div></div><div class="col-4 col-menu menu-sticky-wrap menu-highlight"><nav class="tsd-navigation primary"><ul><li class="current"><a href="modules.html">Exports</a></li></ul></nav><nav class="tsd-navigation secondary menu-sticky"><ul><li class="tsd-kind-class"><a href="classes/AutoTypings.html" class="tsd-kind-icon">Auto<wbr/>Typings</a></li><li class="tsd-kind-class"><a href="classes/JsDelivrSourceResolver.html" class="tsd-kind-icon">Js<wbr/>Delivr<wbr/>Source<wbr/>Resolver</a></li><li class="tsd-kind-class"><a href="classes/LocalStorageCache.html" class="tsd-kind-icon">Local<wbr/>Storage<wbr/>Cache</a></li><li class="tsd-kind-class"><a href="classes/UnpkgSourceResolver.html" class="tsd-kind-icon">Unpkg<wbr/>Source<wbr/>Resolver</a></li><li class="tsd-kind-interface"><a href="interfaces/ImportResourcePathPackage.html" class="tsd-kind-icon">Import<wbr/>Resource<wbr/>Path<wbr/>Package</a></li><li class="tsd-kind-interface"><a href="interfaces/ImportResourcePathRelative.html" class="tsd-kind-icon">Import<wbr/>Resource<wbr/>Path<wbr/>Relative</a></li><li class="tsd-kind-interface"><a href="interfaces/ImportResourcePathRelativeInPackage.html" class="tsd-kind-icon">Import<wbr/>Resource<wbr/>Path<wbr/>Relative<wbr/>In<wbr/>Package</a></li><li class="tsd-kind-interface"><a href="interfaces/Options.html" class="tsd-kind-icon">Options</a></li><li class="tsd-kind-interface"><a href="interfaces/SourceCache.html" class="tsd-kind-icon">Source<wbr/>Cache</a></li><li class="tsd-kind-interface"><a href="interfaces/SourceResolver.html" class="tsd-kind-icon">Source<wbr/>Resolver</a></li><li class="tsd-kind-type-alias"><a href="modules.html#ImportResourcePath" class="tsd-kind-icon">Import<wbr/>Resource<wbr/>Path</a></li><li class="tsd-kind-type-alias"><a href="modules.html#ProgressUpdate" class="tsd-kind-icon">Progress<wbr/>Update</a></li><li class="tsd-kind-function"><a href="modules.html#importResourcePathToString" class="tsd-kind-icon">import<wbr/>Resource<wbr/>Path<wbr/>To<wbr/>String</a></li></ul></nav></div></div></div><footer class="with-border-bottom"><div class="container"><h2>Legend</h2><div class="tsd-legend-group"><ul class="tsd-legend"><li class="tsd-kind-property tsd-parent-kind-interface"><span class="tsd-kind-icon">Property</span></li><li class="tsd-kind-method tsd-parent-kind-interface"><span class="tsd-kind-icon">Method</span></li></ul><ul class="tsd-legend"><li class="tsd-kind-constructor tsd-parent-kind-class"><span class="tsd-kind-icon">Constructor</span></li><li class="tsd-kind-method tsd-parent-kind-class"><span class="tsd-kind-icon">Method</span></li></ul><ul class="tsd-legend"><li class="tsd-kind-property tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private property</span></li><li class="tsd-kind-method tsd-parent-kind-class tsd-is-private"><span class="tsd-kind-icon">Private method</span></li></ul><ul class="tsd-legend"><li class="tsd-kind-property tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static property</span></li><li class="tsd-kind-method tsd-parent-kind-class tsd-is-static"><span class="tsd-kind-icon">Static method</span></li></ul><ul class="tsd-legend"><li class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited"><span class="tsd-kind-icon">Inherited method</span></li></ul></div><h2>Settings</h2><p>Theme <select id="theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></p></div></footer><div class="container tsd-generator"><p>Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></div><div class="overlay"></div><script src="assets/main.js"></script></body></html>